void solve(int n, int arr[], int k, int Q[]) {
    for(int i=0;i<k;i++) {
        int X = Q[i]; // 2
        int firstO = binarySearchFirstO(n,arr,X); // 2
int binarySearchLastO(int n, int arr[], int X) {
    int l = 0; // min index of array
    int r = n - 1; // max index of array 
    int mid;
    while (l <= r) {
      mid = (l+r)/2;
      if((mid == n-1 || arr[mid + 1] > X)  && arr[mid] == X)
        return mid;
      if (arr[mid] > X)
        r = mid - 1; // go left 
      else 
        l = mid + 1; // go right
      
    }
    // if you have not found the element till this point 
    return -1;
}
//int binarySearchLastO(int n, int arr[], int X) {
    int l = 0; // min index of array
    int r = n - 1; // max index of array 
    int mid;
    while (l <= r) {
      mid = (l+r)/2;
      if((mid == n-1 || arr[mid + 1] > X)  && arr[mid] == X)
        return mid;
      if (arr[mid] > X)
        r = mid - 1; // go left 
      else 
        l = mid + 1; // go right
      
    }
    // if you have not found the element till this point 
    return -1;
}

