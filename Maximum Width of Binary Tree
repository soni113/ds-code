class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        int max = Integer.MIN_VALUE;
        
        while(!queue.isEmpty()){
            int size = queue.size();
           // System.out.println(size);
            int curr = 0;
           
            for(int i = 0; i < size; i++){
                TreeNode temp = queue.poll();
                System.out.println(temp.val);
                
                if(i == 0){
                  curr = temp.val; 
                    //System.out.println(curr);
                }
                    
                
                if(i == size - 1){
                   // System.out.println(temp.val);
                    
                    curr = (temp.val - curr) + 1; 
                    //System.out.println(curr);
                    
                }
                    
                
                if(temp.left != null){
                    temp.left.val = (temp.val * 2) - 1;
                    queue.offer(temp.left);
                }
                
                if(temp.right != null){
                    temp.right.val = (temp.val * 2);
                    queue.offer(temp.right);
                }
                
            }
            
            max = Math.max(max, curr);
        }
        return max;
    }
}
